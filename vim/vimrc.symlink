set termguicolors
set nocompatible              " be iMproved, required
filetype off                  " required

let g:vim_home_path = '~/.vim'

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'vimwiki/vimwiki'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" Language plugins
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fatih/vim-go'
Plug 'cespare/vim-toml'
Plug 'hail2u/vim-css3-syntax'
Plug 'cakebaker/scss-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'yuezk/vim-js'                                    " JavaScript support
Plug 'maxmellon/vim-jsx-pretty'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tomlion/vim-solidity'
Plug 'lepture/vim-jinja'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript', { 'for': 'typescript.tsx' }
Plug 'hashivim/vim-terraform'
Plug 'darfink/vim-plist'
"

" Other
Plug 'mattn/emmet-vim'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'itchyny/lightline.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'rizzatti/dash.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-signify'
Plug 'godlygeek/tabular'
Plug 'mhinz/vim-startify'
Plug 'jiangmiao/auto-pairs'
Plug 'mnbbrown/mnbbrown.vim'
Plug 'ap/vim-css-color', { 'for': 'css' }
Plug 'gregsexton/MatchTag'
" Plug 'w0rp/ale'
Plug 'epilande/vim-react-snippets'
Plug 'tpope/vim-abolish'
call plug#end()

filetype plugin indent on

if filereadable(expand(g:vim_home_path . '/bundle/mnbbrown.vim/vimrc.vim'))
  execute 'source ' . g:vim_home_path . '/bundle/mnbbrown.vim/vimrc.vim'
endif

set cmdheight=2
set updatetime=300
set background=dark

" Fuzzy seartch
let $FZF_DEFAULT_COMMAND = 'fd --type f -H --exclude .git'
nnoremap <C-p> :Files<CR>
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

" general
let g:python_host_prog = '/Users/brown_matt/.pyenv/versions/python2-neovim/bin/python'
let g:python3_host_prog = '/Users/brown_matt/.pyenv/versions/python3-neovim/bin/python'
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey   ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey   ctermbg=237
let colorcolumn=80
let indent_guides_auto_colors = 0
let indent_guides_color_change_percent = 10
let indent_guides_guide_size = 2
let g:localvimrc_sandbox = 0

set noshowmode
if filereadable('~/.vim/local.vim')
  so ~/.vim/local.vim
endif

set clipboard=unnamed
set completeopt-=preview

let g:vim_markdown_folding_disabled = 1

" Ruby
autocmd BufNewFile,BufRead Fastfile set filetype=ruby

" JavaScript
au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm,*.njk set ft=jinja
let g:jsx_ext_required = 0

" ALE linting and fixing
" let g:ale_set_loclist = 0
" let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '']
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_open_list = 0
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_python_auto_pipenv = 1
" let g:ale_disable_lsp = 1
" let g:ale_history_log_output = 1
" let g:ale_completion_enabled = 0
" " let g:ale_javascript_eslint_suppress_missing_config = 1
" let g:ale_linters = {
"     \ 'cpp': ['clangd'],
"     \ 'javascript': ['eslint'],
"     \ 'javascript.jsx': ['eslint'],
"     \ 'typescript': ['eslint'],
"     \ 'typescript.jsx': ['eslint'],
"     \ 'terraform': ['terraform'],
"     \ 'python': ['flake8'],
"     \ 'go': ['gofmt'],
"     \ 'rust': ['rustfmt']
" \}
" let g:ale_fixers = {
" \   'cpp': ['clang-format'],
" \   'javascript': ['eslint'],
" \   'javascript.jsx': ['eslint'],
" \   'typescript': ['eslint'],
" \   'typescript.tsx': ['eslint'],
" \   'terraform': ['terraform'],
" \   'python': ['black', 'isort'],
" \   'rust': ['rustfmt']
" \}

" let g:ale_fix_on_save = 1

" coc.vim
let g:coc_enable_locationlist = 0
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>rn <Plug>(coc-rename)

call coc#config('python', {'pythonPath': $PYENV_VIRTUAL_ENV})

" Golang
let g:go_code_completion_enabled = 0
let g:go_def_mapping_enabled = 0
let g:go_template_autocreate = 0
let g:go_metalinter_enabled = ['deadcode', 'errcheck', 'gosimple', 'govet', 'ineffassign', 'staticcheck', 'structcheck', 'typecheck', 'unused', 'varcheck']
au FileType go set noexpandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4

au InsertLeave * set nopaste
