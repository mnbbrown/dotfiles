set termguicolors
set nocompatible              " be iMproved, required
filetype off                  " required

scriptencoding utf-8
set encoding=utf-8

let mapleader=';'         " The <leader> key
set backspace=2           " Makes backspace not behave all retarded-like
set ruler                 " Show the line number and column in the status bar
set laststatus=2          " Always show the status bar
set showmatch             " Highlight matching braces
set showmode              " Show the current mode on the open buffer
set showcmd
set splitbelow            " Splits show up below by default
set splitright            " Splits go to the right by default
set title                 " Set the title for gvim
set showbreak=â†ª           " The character to put to show a line has been wrapped
set number
set updatetime=300
set hidden
set nobackup
set nowritebackup
set cmdheight=2
set shortmess+=c

syntax on                 " Enable filetype detection by syntax

" Search settings
set hlsearch   " Highlight results
set ignorecase " Ignore casing of searches
set incsearch  " Start showing results as you type
set smartcase  " Be smart about case sensitivity when searching

set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

let g:vim_home_path = '~/.vim'

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'vimwiki/vimwiki'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'tomasr/molokai'

" Language plugins
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fatih/vim-go'
Plug 'cespare/vim-toml'
Plug 'hail2u/vim-css3-syntax'
Plug 'cakebaker/scss-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'yuezk/vim-js'                                    " JavaScript support
Plug 'maxmellon/vim-jsx-pretty'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tomlion/vim-solidity'
Plug 'lepture/vim-jinja'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript', { 'for': 'typescript.tsx' }
Plug 'hashivim/vim-terraform'
Plug 'darfink/vim-plist'
"

" Other
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'mattn/emmet-vim'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'itchyny/lightline.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-signify'
Plug 'godlygeek/tabular'
Plug 'mhinz/vim-startify' " Start screen
Plug 'jiangmiao/auto-pairs' " auto close brackets and quotes
Plug 'ap/vim-css-color', { 'for': 'css' } " highlights CSS colours
Plug 'gregsexton/MatchTag' " highlight matching html tags
Plug 'tpope/vim-abolish' " superpowered find and replace + coercion
call plug#end()

filetype plugin indent on


" how it all looks
colorscheme molokai
set guioptions=cegmt
let colorcolumn=80
let indent_guides_auto_colors = 0
let indent_guides_color_change_percent = 10
let indent_guides_guide_size = 2
set cmdheight=2
set background=dark
set completeopt-=preview
set noshowmode
set number relativenumber
set nu rnu
set signcolumn=yes:1

" general
let g:python_host_prog = '/Users/brown_matt/.pyenv/versions/python2-neovim/bin/python'
let g:python3_host_prog = '/Users/brown_matt/.pyenv/versions/python3-neovim/bin/python'
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey   ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey   ctermbg=237

" navigation
inoremap jj <esc>
inoremap jJ <esc>
inoremap Jj <esc>
inoremap JJ <esc>
inoremap jk <esc>
inoremap jK <esc>
inoremap Jk <esc>
inoremap JK <esc>

map j gj
map k gk

nnoremap <PageUp> <C-u>
nnoremap <PageDown> <C-d>

nmap <leader>cd :cd %:h<CR>
nmap <leader>lcd :lcd %:h<CR>

noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p
set clipboard+=unnamedplus

nmap <leader>T :enew<cr>
nmap <leader>l :bnext<CR>
nmap <leader>h :bprevious<CR>
nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bl :ls<CR>

" ctrl+p fuzzy search
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <C-p> :Files<CR>

" Clear whitespace at the end of lines automatically
autocmd BufWritePre * :%s/\s\+$//e
" make paste work
au InsertLeave * set nopaste

" Emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css,php EmmetInstall

" JSON
let g:vim_json_syntax_conceal = 0

let g:vim_markdown_folding_disabled = 1

" Ruby
autocmd BufNewFile,BufRead Fastfile set filetype=ruby

" JavaScript
au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm,*.njk set ft=jinja
let g:jsx_ext_required = 0

" coc.vim
let g:coc_enable_locationlist = 1
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> rn <Plug>(coc-rename)

call coc#config('python', {'pythonPath': $PYENV_VIRTUAL_ENV})
command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Golang
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_code_completion_enabled = 0
let g:go_def_mapping_enabled = 0
let g:go_template_autocreate = 0
let g:go_metalinter_enabled = ['deadcode', 'errcheck', 'gosimple', 'govet', 'ineffassign', 'staticcheck', 'structcheck', 'typecheck', 'unused', 'varcheck']
au FileType go set noexpandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4

if has('nvim-0.5.0')

lua <<EOF
  require'nvim-treesitter.configs'.setup {
    ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
    highlight = {
      enable = true,              -- false will disable the whole extension
    },
}
EOF

endif

if filereadable('~/.vim/local.vim')
  so ~/.vim/local.vim
endif
